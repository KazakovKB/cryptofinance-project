import os
import logging
from openai import AsyncOpenAI
from sqlalchemy.ext.asyncio import create_async_engine
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
import httpx
import uuid
from sqlalchemy.sql import func
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler,
    filters, CallbackQueryHandler, CallbackContext
)
from sqlalchemy import (
    MetaData, Table, Column, SMALLINT, Integer,
    BigInteger, String, Boolean, select, Date, and_, text,
    TIMESTAMP, TEXT, ForeignKey, ForeignKeyConstraint, Numeric
)


async def fetch_openai_response(question: str, chat_history: list) -> str:
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    chat_history.append({"role": "user", "content": question})

    response = await client_ai.chat.completions.create(
        messages=chat_history,
        model="gpt-3.5-turbo",
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT –∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    chat_history.append({"role": "assistant", "content": response.choices[0].message.content})

    return response.choices[0].message.content


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with engine.connect() as conn:
        result = await conn.execute(select(users_table).where(users_table.c.user_id == user.id))
        row = result.fetchone()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not row:
        # –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        user_data = {
            "user_id": user.id,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_premium": user.is_premium,
            "language_code": user.language_code,
            "username": user.username,
            "is_bot": user.is_bot
        }

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with engine.begin() as conn:
            await conn.execute(
                users_table.insert(), user_data
            )

        # –°–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        welcome_message = (
            f"*{user.first_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ Telegram –±–æ—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞!* üöÄ\n\n"
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –¥–∏–Ω–∞–º–∏–∫—É –∏ "
            "–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å "
            "—Ç–µ–±–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üëÄ", web_app=WebAppInfo(url=WEB_APP_URL))],
            [InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data='delete_message')]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_message, parse_mode='Markdown')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ Dashboard
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="*–ü–µ—Ä–µ–π—Ç–∏ –∫ Dashboard:*üëá", parse_mode='Markdown', reply_markup=markup
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è?"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_message, parse_mode='Markdown')


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /about
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    about_bot = ("‚ñ™Ô∏è*–ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞*\n\n"
                 "*‚óΩÔ∏è –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Dashboard'–æ–º*\n\n–ë–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –æ–±–ª–∞–¥–∞—é—â–∏–º –º–æ—â–Ω—ã–º –∏"
                 " –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º Dashboard'–æ–º. –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å "
                 "–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫, —Ç–∞–∫–∏—Ö –∫–∞–∫ Delta, Volume, Funding Rate, "
                 "Liquidation –∏ –¥—Ä—É–≥–∏–µ. –≠—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è"
                 " –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –ø–æ–≤—ã—à–∞—è –∏—Ö —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö –Ω–∞ –±—ã—Å—Ç—Ä–æ –º–µ–Ω—è—é—â–µ–º—Å—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ."
                 "\n\n*‚óΩÔ∏è –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∞ –±–∞–∑–µ GPT-3.5-turbo*\n\n–°–µ—Ä–¥—Ü–µ–º –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π "
                 "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ GPT gpt-3.5-turbo. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ "
                 "—Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, "
                 "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ò–ò —Å–ø–æ—Å–æ–±–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ "
                 "–∑–∞–ø—Ä–æ—Å—ã, –¥–µ–ª–∞—è –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ –º–µ–Ω–µ–µ –≤—Ä–µ–º—è–∑–∞—Ç—Ä–∞—Ç–Ω—ã–º.\n\n"
                 "*‚óΩÔ∏è –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π*\n\n–ë–æ—Ç –æ–±–ª–∞–¥–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –º–≥–Ω–æ–≤–µ–Ω–Ω–æ "
                 "–ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–µ–ª–∞—Ç—å —Å–≤–æ–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è, –∫–∞—Å–∞—é—â–∏–µ—Å—è "
                 "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π,"
                 " —á—Ç–æ –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ –≤ —É—Å–ª–æ–≤–∏—è—Ö –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, "
                 "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º, —Ç—Ä–µ–π–¥–µ—Ä—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, "
                 "–æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data='delete_message')]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=about_bot, parse_mode='Markdown', reply_markup=markup
    )


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /dashboard
async def dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üëÄ", web_app=WebAppInfo(url=WEB_APP_URL))],
        [InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data='delete_message')]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ Dashboard
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text="*–ü–µ—Ä–µ–π—Ç–∏ –∫ Dashboard:*üëá", parse_mode='Markdown', reply_markup=markup
    )


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /profile
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with engine.connect() as conn:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = await conn.execute(select(users_table.c.newsletter, users_table.c.subscription)
                                   .where(users_table.c.user_id == user.id))
        newsletter_var, subscription_var = query.fetchone()  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription_type = "üåü –ü–æ–¥–ø–∏—Å–∫–∞: `PRO`" if subscription_var else "‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞: `Free`"
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    newsletter_status = "üîî –ù–æ–≤–æ—Å—Ç–∏: `–í–∫–ª\\.`" if newsletter_var else "üîï –ù–æ–≤–æ—Å—Ç–∏: `–í—ã–∫–ª\\.`"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
    first_name = (user.first_name.replace('-', '\\-').replace('.', '\\.')
                  .replace('_', '\\_')) if user.first_name else '\\_'
    last_name = (user.last_name.replace('-', '\\-').replace('.', '\\.')
                 .replace('_', '\\_')) if user.last_name else '\\_'

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞", callback_data='subscription_control')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–æ–≤–æ—Å—Ç–∏", callback_data='news_control')],
        [InlineKeyboardButton("üí® –°–∫—Ä—ã—Ç—å", callback_data='delete_message')]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    message = f"üë§ {first_name} {last_name}\n\n{subscription_type}\n\n{newsletter_status}"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
    photos = await context.bot.get_user_profile_photos(user_id=user.id)
    if photos.photos:
        photo = photos.photos[0][0]  # –í—ã–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
        photo_file = await context.bot.get_file(photo.file_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ

        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_file.file_id,
            caption=message,
            parse_mode='MarkdownV2',
            reply_markup=markup
        )
    else:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo='https://ibb.co/C7XdhDM',
            caption=message,
            parse_mode='MarkdownV2',
            reply_markup=markup
        )


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /subscription
async def subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with engine.connect() as conn:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–∏–∏ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        query_sql = await conn.execute(select(orders_table.c.id).where(
            and_(orders_table.c.user_id == user.id, orders_table.c.status == 'ACTIVE')
        ))
        order_id = query_sql.fetchone()  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query_sql = await conn.execute(select(users_table.c.subscription).where(users_table.c.user_id == user.id))
        status = query_sql.fetchone()[0]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if status:
        async with engine.connect() as conn:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–æ–∫–∞—Ö –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            query_sql = (
                select(
                    (orders_table.c.updated_at + text("INTERVAL '30 days'")).label('expires_on'),
                    (orders_table.c.updated_at + text("INTERVAL '30 days'") - func.current_timestamp()).label(
                        'time_left')
                )
                .where(
                    and_(
                        orders_table.c.user_id == user.id,
                        orders_table.c.status == 'PAID'
                    )
                )
                .order_by(orders_table.c.updated_at.desc()).limit(1)
            )

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            result = await conn.execute(query_sql)
            subscription_info = result.fetchone()  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–æ–∫–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = (
            f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç:*\nüìÜ {subscription_info.expires_on.strftime('%Y-%m-%d %H:%M')}\n\n"
            f"*–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:*\n‚è≥ {subscription_info.time_left}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='Markdown')

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
    else:
        if order_id:
            headers = {
                'Wpay-Store-Api-Key': wallet_tg,
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            }

            payload = {
                'id': order_id[0]
            }

            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    "https://pay.wallet.tg/wpay/store-api/v1/order/preview",
                    params=payload, headers=headers, timeout=10
                )
                if response.status_code != 200:
                    data = None
                else:
                    data = response.json()

            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
            if data:
                if data['data']['status'] == 'EXPIRED':
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
                    async with engine.begin() as conn:
                        await conn.execute(
                            orders_table.update().where(
                                and_(orders_table.c.user_id == user.id, orders_table.c.status == 'ACTIVE')
                            ).values(status='EXPIRED')
                        )
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                    external_id = str(uuid.uuid4())

                    headers = {
                        'Wpay-Store-Api-Key': wallet_tg,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    }

                    payload = {
                        'amount': {
                            'currencyCode': 'TON',
                            'amount': '0.1',
                        },
                        'description': 'Subscription payment',
                        'externalId': f'{external_id}',
                        'timeoutSeconds': 86400,
                        'customerTelegramUserId': f'{user.id}',
                        'returnUrl': 'https://t.me/cryptofinance_project_bot',
                        'failReturnUrl': 'https://t.me/wallet',
                    }

                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                    async with httpx.AsyncClient() as client:
                        response = await client.post(
                            "https://pay.wallet.tg/wpay/store-api/v1/order",
                            json=payload, headers=headers, timeout=10
                        )
                        if response.status_code != 200:
                            data = None
                        else:
                            data = response.json()

                    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
                    if data:
                        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        order_data = {
                            'id': int(data['data']['id']),
                            "external_id": external_id,
                            "order_number": data['data']['number'],
                            "amount": 0.1,
                            "currency_code": 'TON',
                            "description": 'Subscription payment',
                            "status": data['data']['status'],
                            "user_id": user.id
                        }

                        async with engine.begin() as conn:
                            await conn.execute(orders_table.insert(), order_data)

                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
                        url = data['data']['payLink']
                        keyboard = [
                            [InlineKeyboardButton("üëõ Pay via Wallet", url=url)],
                        ]
                        markup = InlineKeyboardMarkup(keyboard)

                        message = ('*–°–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ Pro:*\n\n‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, '
                                   '–ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /subscription')
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id, text=message,
                            reply_markup=markup, parse_mode='Markdown'
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
                        message = ("*–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...* üëÄ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                                   " –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /subscription")
                        await context.bot.send_message(chat_id=update.effective_chat.id,
                                                       text=message, parse_mode='Markdown')

                elif data['data']['status'] == 'PAID':
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                    async with engine.begin() as conn:
                        await conn.execute(
                            users_table.update().where(users_table.c.user_id == user.id).values(
                                subscription=True,
                                subscription_end=func.current_date() + text('INTERVAL \'31 day\'')
                            )
                        )

                        await conn.execute(
                            orders_table.update().where(
                                and_(orders_table.c.user_id == user.id, orders_table.c.status == 'ACTIVE')
                            ).values(status='PAID')
                        )

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Pro –ø–ª–∞–Ω–∞
                    message = "*–í–∞—à –ø–ª–∞–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ Pro!* üåü"
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id, text=message, parse_mode='Markdown'
                    )
                else:
                    # –ò–Ω–∞—á–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–µ
                    url = data['data']['payLink']

                    keyboard = [
                        [InlineKeyboardButton("üëõ Pay via Wallet", url=url)],
                    ]
                    markup = InlineKeyboardMarkup(keyboard)

                    message = ('*–°–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ Pro:*\n\n‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, '
                               '–ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /subscription')
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id, text=message,
                        reply_markup=markup, parse_mode='Markdown'
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
                message = ("*–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...* üëÄ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                           " –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /subscription")
                await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='Markdown')
        else:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –∏–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            external_id = str(uuid.uuid4())

            headers = {
                'Wpay-Store-Api-Key': wallet_tg,
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            }

            payload = {
                'amount': {
                    'currencyCode': 'TON',
                    'amount': '0.1',
                },
                'description': 'Subscription payment',
                'externalId': f'{external_id}',
                'timeoutSeconds': 86400,
                'customerTelegramUserId': f'{user.id}',
                'returnUrl': 'https://t.me/cryptofinance_project_bot',
                'failReturnUrl': 'https://t.me/wallet',
            }

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "https://pay.wallet.tg/wpay/store-api/v1/order",
                    json=payload, headers=headers, timeout=10
                )
                if response.status_code != 200:
                    data = None
                else:
                    data = response.json()
            if data:
                # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                order_data = {
                    'id': int(data['data']['id']),
                    "external_id": external_id,
                    "order_number": data['data']['number'],
                    "amount": 0.1,
                    "currency_code": 'TON',
                    "description": 'Subscription payment',
                    "status": data['data']['status'],
                    "user_id": user.id
                }

                async with engine.begin() as conn:
                    await conn.execute(orders_table.insert(), order_data)

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã
                url = data['data']['payLink']

                keyboard = [
                    [InlineKeyboardButton("üëõ Pay via Wallet", url=url)],
                ]
                markup = InlineKeyboardMarkup(keyboard)

                message = ('*–°–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ Pro:*\n\n‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, '
                           '–ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /subscription')
                await context.bot.send_message(
                    chat_id=update.effective_chat.id, text=message, reply_markup=markup, parse_mode='Markdown'
                )
            else:
                message = ("*–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...* üëÄ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                           " –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /subscription")
                await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='Markdown')


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /news
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –î–æ—Å—Ç—É–ø –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    user_data = context.user_data

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='details_news')],
        [InlineKeyboardButton("‚èÆ", callback_data='previous_news'),
         InlineKeyboardButton("‚è≠", callback_data='next_news')],
        [InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data='delete_message')]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
    user_data['offset'] = 0
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é get_article —Å —Ç–µ–∫—É—â–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º
    data = await get_article(offset=user_data['offset'])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if data:
        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        title, description, date, _, _, _ = data
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"üì∞ *{title}*\n\n_{description}_\n\nüìÜ {date}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=message, parse_mode='Markdown', reply_markup=markup
        )


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.effective_message  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot_response = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    chat_history = context.user_data.get('chat_history', [])
    if not chat_history:
        context.user_data['chat_history'] = [
            {
                "role": "system",
                "content": ("–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è"
                            " –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏"
                            " –∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ.")
            }
        ]

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with engine.connect() as conn:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = await conn.execute(select(users_table.c.gpt_limit, users_table.c.subscription)
                                   .where(users_table.c.user_id == message.chat_id))
        limit, subscription_val = query.fetchone()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if subscription_val:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –±–µ–∑ —É—á—ë—Ç–∞ –ª–∏–º–∏—Ç–∞
        bot_response = await fetch_openai_response(message.text, chat_history)
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if len(message.text) <= 200:
            if limit > 0:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω
                bot_response = await fetch_openai_response(message.text, chat_history)
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                warning = ('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.'
                           '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, '
                           '–≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.')

                await update.message.reply_text(warning)
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            warning = ('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É, –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É. '
                       '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å/–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª 200 —Å–∏–º–≤–æ–ª–æ–≤.')

            await update.message.reply_text(warning)

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if bot_response:
        message_data = {
            "message_id": message.message_id,
            "chat_id": message.chat_id,
            "date": message.date,
            "text": message.text,
            'gpt': bot_response
        }

        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        async with engine.begin() as conn:
            await conn.execute(messages_table.insert(), message_data)

            await conn.execute(
                users_table.update().where(users_table.c.user_id == message.chat_id)
                .values(gpt_limit=users_table.c.gpt_limit - 1)
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ context.user_data
        context.user_data['chat_history'] = chat_history

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await update.message.reply_text(bot_response, parse_mode='Markdown')


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button_callback_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–±—ç–∫–∞

    user_data = context.user_data  # –î–æ—Å—Ç—É–ø –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    callback_data = query.data  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–±—ç–∫–µ

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
    if callback_data == 'next_news':
        user_data['offset'] += 1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
        title, description, date, _, _, _ = await get_article(offset=user_data['offset'])
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—å—é
        message = f"üì∞ *{title}*\n\n_{description}_\n\nüìÜ {date}"
        await query.edit_message_text(text=message, parse_mode='Markdown', reply_markup=query.message.reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
    elif callback_data == 'previous_news' and user_data['offset'] > 0:
        user_data['offset'] -= 1  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
        title, description, date, _, _, _ = await get_article(offset=user_data['offset'])
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—å—é
        message = f"üì∞ *{title}*\n\n_{description}_\n\nüìÜ {date}"
        await query.edit_message_text(text=message, parse_mode='Markdown', reply_markup=query.message.reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif callback_data == 'delete_message':
        await query.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–æ–≤–æ—Å—Ç–∏"
    elif callback_data == 'details_news':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ—Å—Ç–∏
        title, _, _, article, link, source = await get_article(offset=user_data['offset'])
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
        if source == 'CoinDesk':
            url = 'https://www.coindesk.com' + link
        else:
            url = None
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_news')],
            [InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data='delete_message')]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"üì∞ *{title}*\n\n{article}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: [{source}]({url})"
        await query.edit_message_text(text=message, parse_mode='Markdown', reply_markup=markup)

    # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É –Ω–æ–≤–æ—Å—Ç–µ–π
    elif callback_data == 'main_news':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        title, description, date, _, _, _ = await get_article(offset=user_data['offset'])
        message = f"üì∞ *{title}*\n\n_{description}_\n\nüìÜ {date}"
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='details_news')],
            [InlineKeyboardButton("‚èÆ", callback_data='previous_news'),
             InlineKeyboardButton("‚è≠", callback_data='next_news')],
            [InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data='delete_message')]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(text=message, parse_mode='Markdown', reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏"
    elif callback_data == 'news_control':
        message = "‚öôÔ∏è *–ù–æ–≤–æ—Å—Ç–∏:*"
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üì© –†–∞—Å—Å—ã–ª–∫–∞", callback_data='newsletter_status')],
            [InlineKeyboardButton("üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data='news_source')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='profile')]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_caption(caption=message, parse_mode='Markdown', reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é"
    elif callback_data == 'profile':
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.message.delete()
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
        await profile(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"
    elif callback_data == 'newsletter_status':
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with engine.connect() as conn:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            query_sql = await conn.execute(
                select(users_table.c.newsletter).where(users_table.c.user_id == update.effective_user.id))
            newsletter_var = query_sql.fetchone()

        message = "‚öôÔ∏è *–†–∞—Å—Å—ã–ª–∫–∞:*"
        status = "üîî –í–∫–ª." if bool(newsletter_var[0]) else "üîï –í—ã–∫–ª."
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(status, callback_data='newsletter_checkout')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='profile')]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_caption(caption=message, parse_mode='Markdown', reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"
    elif callback_data == 'newsletter_checkout':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        async with engine.begin() as conn:
            await conn.execute(
                users_table.update().where(users_table.c.user_id == update.effective_user.id)
                .values(newsletter=~users_table.c.newsletter)
            )

        # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await query.answer('‚úÖ\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!', show_alert=True)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.message.delete()
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
        await profile(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"
    elif callback_data == 'news_source':
        # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await query.answer('üèó\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                           show_alert=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"
    elif callback_data == 'subscription_control':
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.message.delete()
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscription
        await subscription(update, context)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_article(offset: int) -> tuple:
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with engine.connect() as conn:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã
        # –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å–º–µ—â–µ–Ω–∏—è, –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏–∏
        query = select(articles_table.c.title,
                       articles_table.c.description,
                       articles_table.c.date,
                       articles_table.c.article,
                       articles_table.c.link,
                       articles_table.c.source).order_by(articles_table.c.date.desc()).offset(offset).limit(1)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        result = await conn.execute(query)
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        data = result.fetchone()

        # –í–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏
        return data


if __name__ == '__main__':
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.WARNING,  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
        datefmt='%Y-%m-%d %H:%M:%S'  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    engine = create_async_engine(
        os.environ.get('POSTGRES_ASYNC'),  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        echo=True  # –í—ã–≤–æ–¥ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    meta = MetaData()

    users_table = Table(
        'users',
        meta,
        Column('user_id', BigInteger, primary_key=True),
        Column('first_name', String(64)),
        Column('last_name', String(64)),
        Column('is_premium', Boolean),
        Column('language_code', String(10)),
        Column('username', String(64)),
        Column('is_bot', Boolean),
        Column('gpt_limit', SMALLINT, default=20),
        Column('newsletter', Boolean, default=True),
        Column('subscription', Boolean, default=False),
        Column('subscription_end', Date)
    )

    messages_table = Table(
        'messages',
        meta,
        Column('message_id', BigInteger, primary_key=True),
        Column('chat_id', BigInteger, ForeignKey('users.user_id')),
        Column('date', TIMESTAMP(timezone=True)),
        Column('text', TEXT),
        Column('gpt', TEXT),
        ForeignKeyConstraint(['chat_id'], ['users.user_id'], name='fk_users')
    )

    articles_table = Table(
        'articles',
        meta,
        Column('link', String(255), primary_key=True),
        Column('title', String(255), nullable=False),
        Column('description', String, nullable=False),
        Column('date', Date, nullable=False),
        Column('article', TEXT, nullable=False),
        Column('source', String(30), nullable=False),
        Column('new', Boolean, default=True)
    )

    orders_table = Table(
        'orders', meta,
        Column('id', BigInteger, primary_key=True),
        Column('external_id', String(255), unique=True, nullable=False),
        Column('order_number', String(24), unique=True, nullable=False),
        Column('amount', Numeric(10, 2), nullable=False),
        Column('currency_code', String(3), nullable=False),
        Column('description', TEXT),
        Column('status', String(50), nullable=False),
        Column('created_at', TIMESTAMP(timezone=True), default=func.current_timestamp()),
        Column('updated_at', TIMESTAMP(timezone=True), default=func.current_timestamp(),
               onupdate=func.current_timestamp()),
        Column('user_id', Integer, ForeignKey('users.user_id'), nullable=False)
    )

    # API –¥–ª—è Wallet Telegram
    wallet_tg = os.environ.get('WALLET')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    WEB_APP_URL = os.environ.get('WEB_APP')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
    app = ApplicationBuilder().token(os.environ.get('TELEGRAM')).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("dashboard", dashboard))
    app.add_handler(CommandHandler("help", about))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("subscription", subscription))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CallbackQueryHandler(button_callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI
    client_ai = AsyncOpenAI(api_key=os.environ.get('OPENAI'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞
    app.run_polling()
